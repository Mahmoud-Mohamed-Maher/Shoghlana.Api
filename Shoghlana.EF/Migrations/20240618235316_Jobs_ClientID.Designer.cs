// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shoghlana.EF;

#nullable disable

namespace Shoghlana.EF.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20240618235316_Jobs_ClientID")]
    partial class Jobs_ClientID
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "17732e3f-5b88-467d-826f-b88430b5f0b2",
                            ConcurrencyStamp = "e7f055d1-97b3-49a9-be21-5b2f586522f2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "aa088447-8a04-49df-8897-dd86f754369a",
                            ConcurrencyStamp = "16687aaa-e22f-48a0-b581-b78746fb4095",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "b1507d85-b4da-4a29-bc21-bfd0dd795842",
                            ConcurrencyStamp = "55aa8cb3-5c6a-440c-8048-9c51135b3303",
                            Name = "Freelancer",
                            NormalizedName = "FREELANCER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("FreeLancerId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId")
                        .IsUnique()
                        .HasFilter("[AdminId] IS NOT NULL");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasFilter("[ClientId] IS NOT NULL");

                    b.HasIndex("FreeLancerId")
                        .IsUnique()
                        .HasFilter("[FreeLancerId] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "تشمل كافة الخدمات المتعلقة بالتصميم الجرافيكي، التصميم الصناعي، وتصميم الويب.",
                            Title = "خدمات التصميم"
                        },
                        new
                        {
                            Id = 2,
                            Description = "تشمل كتابة وتطوير التطبيقات والبرمجيات لمختلف الأنظمة والأجهزة.",
                            Title = "خدمات برمجية"
                        },
                        new
                        {
                            Id = 3,
                            Description = "تشمل كتابة المقالات، الترجمة الفورية، وكتابة المحتوى للمواقع والمدونات.",
                            Title = "خدمات الكتابة والترجمة"
                        },
                        new
                        {
                            Id = 4,
                            Description = "تشمل إدارة حملات التسويق الرقمي، الإعلانات على وسائل التواصل الاجتماعي، وتحليلات السوق.",
                            Title = "خدمات التسويق الرقمي"
                        },
                        new
                        {
                            Id = 5,
                            Description = "تشمل دعم المستخدمين، إصلاح الأعطال التقنية، وتحسين أداء النظم والشبكات.",
                            Title = "خدمات الدعم الفني والتقني"
                        },
                        new
                        {
                            Id = 6,
                            Description = "تشمل تقديم دورات تدريبية، تصميم مناهج تعليمية، وتطوير الموارد التعليمية.",
                            Title = "خدمات التعليم والتدريب"
                        });
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("RegisterationTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "المملكة العربية السعودية",
                            Description = "مبرمج ومطور تطبيقات متخصص في تطوير الويب",
                            Name = "عبد الرحمن أحمد",
                            Phone = "+966123456789",
                            RegisterationTime = new DateTime(2023, 12, 19, 2, 53, 14, 545, DateTimeKind.Local).AddTicks(9850)
                        },
                        new
                        {
                            Id = 2,
                            Country = "مصر",
                            Description = "مصممة جرافيك محترفة تعمل في تصميم اللوجوهات والبوسترات",
                            Name = "فاطمة محمد",
                            Phone = "+201234567890",
                            RegisterationTime = new DateTime(2023, 6, 19, 2, 53, 14, 545, DateTimeKind.Local).AddTicks(9927)
                        },
                        new
                        {
                            Id = 3,
                            Country = "الإمارات العربية المتحدة",
                            Description = "مسوق رقمي محترف بخبرة في إدارة الحملات الإعلانية عبر وسائل التواصل الاجتماعي",
                            Name = "علي العبدالله",
                            Phone = "+971123456789",
                            RegisterationTime = new DateTime(2024, 3, 19, 2, 53, 14, 545, DateTimeKind.Local).AddTicks(9932)
                        },
                        new
                        {
                            Id = 4,
                            Country = "الأردن",
                            Description = "كاتبة محتوى متخصصة في الكتابة الإبداعية والمقالات الفنية",
                            Name = "مريم حسن",
                            Phone = "+962123456789",
                            RegisterationTime = new DateTime(2023, 9, 19, 2, 53, 14, 545, DateTimeKind.Local).AddTicks(9936)
                        },
                        new
                        {
                            Id = 5,
                            Country = "العراق",
                            Description = "مصور فوتوغرافي متخصص في تصوير الأحداث والمناسبات الخاصة",
                            Name = "يوسف خالد",
                            Phone = "+964123456789",
                            RegisterationTime = new DateTime(2023, 11, 19, 2, 53, 14, 545, DateTimeKind.Local).AddTicks(9941)
                        },
                        new
                        {
                            Id = 6,
                            Country = "السعودية",
                            Description = "مديرة مشروع محترفة في إدارة المشاريع التقنية والتطوير البرمجي",
                            Name = "لمى عبدالله",
                            Phone = "+966123456789",
                            RegisterationTime = new DateTime(2024, 2, 19, 2, 53, 14, 545, DateTimeKind.Local).AddTicks(9944)
                        },
                        new
                        {
                            Id = 7,
                            Country = "مصر",
                            Description = "مسوق محتوى إبداعي يعمل على ترويج المحتوى الرقمي للشركات الناشئة",
                            Name = "عمر أحمد",
                            Phone = "+201234567890",
                            RegisterationTime = new DateTime(2023, 7, 19, 2, 53, 14, 545, DateTimeKind.Local).AddTicks(9949)
                        },
                        new
                        {
                            Id = 8,
                            Country = "لبنان",
                            Description = "مطورة تطبيقات محترفة تعمل في تطوير تطبيقات الهواتف الذكية",
                            Name = "رنا محمود",
                            Phone = "+961123456789",
                            RegisterationTime = new DateTime(2023, 10, 19, 2, 53, 14, 545, DateTimeKind.Local).AddTicks(9953)
                        },
                        new
                        {
                            Id = 9,
                            Country = "الأردن",
                            Description = "مدير تسويق متخصص في إدارة استراتيجيات التسويق الرقمي",
                            Name = "أحمد علي",
                            Phone = "+962123456789",
                            RegisterationTime = new DateTime(2024, 1, 19, 2, 53, 14, 545, DateTimeKind.Local).AddTicks(9956)
                        },
                        new
                        {
                            Id = 10,
                            Country = "السعودية",
                            Description = "خبيرة في تصميم وإدارة مواقع الويب للشركات الصغيرة والمتوسطة",
                            Name = "هدى صالح",
                            Phone = "+966123456789",
                            RegisterationTime = new DateTime(2023, 8, 19, 2, 53, 14, 545, DateTimeKind.Local).AddTicks(9960)
                        },
                        new
                        {
                            Id = 11,
                            Country = "الإمارات العربية المتحدة",
                            Description = "محاسبة مالية محترفة تعمل في مجال إعداد التقارير المالية",
                            Name = "سلمى عبدالله",
                            Phone = "+971123456789",
                            RegisterationTime = new DateTime(2024, 3, 19, 2, 53, 14, 545, DateTimeKind.Local).AddTicks(9964)
                        },
                        new
                        {
                            Id = 12,
                            Country = "مصر",
                            Description = "مهندس معماري متخصص في تصميم المباني السكنية",
                            Name = "محمد حسن",
                            Phone = "+201234567890",
                            RegisterationTime = new DateTime(2023, 11, 19, 2, 53, 14, 545, DateTimeKind.Local).AddTicks(9968)
                        },
                        new
                        {
                            Id = 13,
                            Country = "العراق",
                            Description = "طبيبة مختصة في طب الأطفال والأمراض النفسية",
                            Name = "زينب عبدالله",
                            Phone = "+964123456789",
                            RegisterationTime = new DateTime(2024, 4, 19, 2, 53, 14, 545, DateTimeKind.Local).AddTicks(9974)
                        },
                        new
                        {
                            Id = 14,
                            Country = "لبنان",
                            Description = "مصمم جرافيك مبدع يعمل في تصميم الإعلانات التجارية",
                            Name = "أحمد حسين",
                            Phone = "+961123456789",
                            RegisterationTime = new DateTime(2023, 9, 19, 2, 53, 14, 545, DateTimeKind.Local).AddTicks(9978)
                        },
                        new
                        {
                            Id = 15,
                            Country = "الأردن",
                            Description = "مترجمة محترفة تعمل في ترجمة النصوص الطبية والعلمية",
                            Name = "فاطمة علي",
                            Phone = "+962123456789",
                            RegisterationTime = new DateTime(2024, 1, 19, 2, 53, 14, 545, DateTimeKind.Local).AddTicks(9982)
                        },
                        new
                        {
                            Id = 16,
                            Country = "السعودية",
                            Description = "مطور ويب محترف في تطوير التطبيقات الإلكترونية",
                            Name = "عبدالله محمود",
                            Phone = "+966123456789",
                            RegisterationTime = new DateTime(2023, 7, 19, 2, 53, 14, 545, DateTimeKind.Local).AddTicks(9986)
                        },
                        new
                        {
                            Id = 17,
                            Country = "مصر",
                            Description = "مهندسة معمارية متخصصة في تصميم المنشآت الصناعية",
                            Name = "ريم عبدالله",
                            Phone = "+201234567890",
                            RegisterationTime = new DateTime(2023, 10, 19, 2, 53, 14, 545, DateTimeKind.Local).AddTicks(9990)
                        },
                        new
                        {
                            Id = 18,
                            Country = "لبنان",
                            Description = "محاسب مالي يتمتع بخبرة واسعة في المحاسبة المالية",
                            Name = "عمر حسن",
                            Phone = "+961123456789",
                            RegisterationTime = new DateTime(2024, 2, 19, 2, 53, 14, 545, DateTimeKind.Local).AddTicks(9994)
                        });
                });

            modelBuilder.Entity("Shoghlana.Core.Models.ClientNotification", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("sentTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ClientId");

                    b.ToTable("ClientNotifications");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Freelancer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Overview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PersonalImageBytes")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Freelancers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "القاهرة، مصر",
                            Name = "محمد أحمد",
                            Overview = "مطور محترف بخبرة في تطوير تطبيقات الويب والهواتف الذكية",
                            Title = "مطور تطبيقات متخصص"
                        },
                        new
                        {
                            Id = 2,
                            Address = "الرياض، السعودية",
                            Name = "فاطمة علي",
                            Overview = "مصممة ذات خبرة عالية في تصميم الشعارات والبوسترات",
                            Title = "مصممة جرافيك محترفة"
                        },
                        new
                        {
                            Id = 3,
                            Address = "القاهرة، مصر",
                            Name = "أحمد خالد",
                            Overview = "مبرمج ذو خبرة في تطوير التطبيقات المتقدمة باستخدام تقنيات الذكاء الاصطناعي",
                            Title = "مبرمج متخصص في الذكاء الاصطناعي"
                        },
                        new
                        {
                            Id = 4,
                            Address = "دبي، الإمارات",
                            Name = "سارة حسين",
                            Overview = "مصممة جرافيك بخبرة في التصميم التجريدي والفنون الإبداعية",
                            Title = "مصممة تجريدية ومبدعة"
                        },
                        new
                        {
                            Id = 5,
                            Address = "الإسكندرية، مصر",
                            Name = "عبد الرحمن محمود",
                            Overview = "مطور محترف بخبرة في بناء وتطوير المواقع الإلكترونية الكبيرة والمعقدة",
                            Title = "مطور مواقع إلكترونية متقدم"
                        },
                        new
                        {
                            Id = 6,
                            Address = "جدة، السعودية",
                            Name = "ريما عبدالله",
                            Overview = "مصممة جرافيك بخبرة واسعة في تصميم الشعارات والهويات التجارية",
                            Title = "مصممة جرافيك احترافية"
                        },
                        new
                        {
                            Id = 7,
                            Address = "القاهرة، مصر",
                            Name = "محمود علي",
                            Overview = "مطور متخصص بخبرة في تطوير تطبيقات الهواتف الذكية باستخدام أحدث التقنيات",
                            Title = "مطور تطبيقات متخصص في الهواتف الذكية"
                        },
                        new
                        {
                            Id = 8,
                            Address = "الرياض، السعودية",
                            Name = "نور عبدالله",
                            Overview = "مطورة بخبرة في تطوير تطبيقات الويب والهواتف الذكية بتقنيات متقدمة",
                            Title = "مطورة تطبيقات محترفة"
                        },
                        new
                        {
                            Id = 9,
                            Address = "الإسكندرية، مصر",
                            Name = "ليلى محمد",
                            Overview = "مصممة جرافيك وفنانة بخبرة في تصميم الرسومات والفنون التشكيلية",
                            Title = "مصممة جرافيك وفنانة مبدعة"
                        },
                        new
                        {
                            Id = 10,
                            Address = "المنامة، البحرين",
                            Name = "علي الحسيني",
                            Overview = "مطور بخبرة في تطوير تطبيقات الويب والهواتف الذكية باللغات المتعددة",
                            Title = "مطور تطبيقات إلكترونية"
                        });
                });

            modelBuilder.Entity("Shoghlana.Core.Models.FreelancerNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("sentTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.ToTable("FreelancerNotifications");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.FreelancerSkills", b =>
                {
                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("FreelancerId")
                        .HasColumnType("int");

                    b.HasKey("SkillId", "FreelancerId");

                    b.HasIndex("FreelancerId");

                    b.ToTable("FreelancerSkills");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExperienceLevel")
                        .HasColumnType("int");

                    b.Property<int?>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxBudget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinBudget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PostTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ClientId");

                    b.HasIndex("FreelancerId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            ClientId = 1,
                            Description = "تصميم وأعمال فنية احترافية",
                            ExperienceLevel = 0,
                            FreelancerId = 1,
                            MaxBudget = 500m,
                            MinBudget = 100m,
                            PostTime = new DateTime(2024, 6, 19, 2, 53, 14, 548, DateTimeKind.Local).AddTicks(8766),
                            Status = 0,
                            Title = "تصميم شعار احترافي ومميز"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            ClientId = 2,
                            Description = "تصميم وأعمال فنية إدارية",
                            ExperienceLevel = 1,
                            FreelancerId = 2,
                            MaxBudget = 700m,
                            MinBudget = 200m,
                            PostTime = new DateTime(2024, 6, 19, 2, 53, 14, 548, DateTimeKind.Local).AddTicks(8825),
                            Status = 0,
                            Title = "تصميم بوستر إعلاني لمواقع التواصل"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            ClientId = 3,
                            Description = "تصميم بطاقات أعمال",
                            ExperienceLevel = 2,
                            FreelancerId = 3,
                            MaxBudget = 600m,
                            MinBudget = 150m,
                            PostTime = new DateTime(2024, 6, 19, 2, 53, 14, 548, DateTimeKind.Local).AddTicks(8832),
                            Status = 0,
                            Title = "تصميم كارت شخصي احترافي للطباعة"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            ClientId = 4,
                            Description = "برمجة وتطوير المواقع والتطبيقات",
                            ExperienceLevel = 1,
                            FreelancerId = 4,
                            MaxBudget = 800m,
                            MinBudget = 300m,
                            PostTime = new DateTime(2024, 6, 19, 2, 53, 14, 548, DateTimeKind.Local).AddTicks(8882),
                            Status = 0,
                            Title = "تركيب لوحة تحكم مجانية مدى الحياة"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            ClientId = 5,
                            Description = "برمجة مواقع الإنترنت",
                            ExperienceLevel = 0,
                            FreelancerId = 5,
                            MaxBudget = 700m,
                            MinBudget = 200m,
                            PostTime = new DateTime(2024, 6, 19, 2, 53, 14, 548, DateTimeKind.Local).AddTicks(8889),
                            Status = 0,
                            Title = "تصميم موقع تعريفي للشركات"
                        });
                });

            modelBuilder.Entity("Shoghlana.Core.Models.JobSkills", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("JobId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("JobSkills");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Poster")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("TimePublished")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description for Project1",
                            FreelancerId = 1,
                            Poster = new byte[] { 32, 33, 34, 35 },
                            Title = "Project1"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description for Project2",
                            FreelancerId = 2,
                            Poster = new byte[] { 32, 33, 34, 35 },
                            Title = "Project2"
                        });
                });

            modelBuilder.Entity("Shoghlana.Core.Models.ProjectImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = new byte[] { 32, 33, 34, 35 }
                        },
                        new
                        {
                            Id = 2,
                            Image = new byte[] { 32, 33, 34, 35 }
                        });
                });

            modelBuilder.Entity("Shoghlana.Core.Models.ProjectSkills", b =>
                {
                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("SkillId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectSkills");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Proposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ApprovedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeadLine")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<int>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<string>("ReposLinks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("JobId");

                    b.ToTable("Proposals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApprovedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeadLine = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 0.0,
                            FreelancerId = 1,
                            JobId = 1,
                            Price = 300m,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            ApprovedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeadLine = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 0.0,
                            FreelancerId = 2,
                            JobId = 2,
                            Price = 400m,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Shoghlana.Core.Models.ProposalImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("ProposalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId");

                    b.ToTable("ProposalImages");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Rate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobId")
                        .IsUnique()
                        .HasFilter("[JobId] IS NOT NULL");

                    b.ToTable("Rates", t =>
                        {
                            t.HasCheckConstraint("CK_VALUE_RANGE", "[Value] BETWEEN 1 AND 5");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            JobId = 1,
                            Value = 4
                        },
                        new
                        {
                            Id = 2,
                            JobId = 2,
                            Value = 5
                        });
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "تصميم الجرافيك"
                        },
                        new
                        {
                            Id = 2,
                            Title = "الرسم الصناعي"
                        },
                        new
                        {
                            Id = 3,
                            Title = "تصميم الويب"
                        },
                        new
                        {
                            Id = 4,
                            Title = "تصميم الهوية التجارية"
                        },
                        new
                        {
                            Id = 5,
                            Title = "تصميم المنتجات"
                        },
                        new
                        {
                            Id = 6,
                            Title = "تصميم الشعارات"
                        },
                        new
                        {
                            Id = 7,
                            Title = "تطوير تطبيقات الجوال"
                        },
                        new
                        {
                            Id = 8,
                            Title = "تطوير الويب"
                        },
                        new
                        {
                            Id = 9,
                            Title = "تطوير الألعاب"
                        },
                        new
                        {
                            Id = 10,
                            Title = "برمجة الحاسوب"
                        },
                        new
                        {
                            Id = 11,
                            Title = "كتابة المحتوى"
                        },
                        new
                        {
                            Id = 12,
                            Title = "كتابة المقالات"
                        },
                        new
                        {
                            Id = 13,
                            Title = "الترجمة"
                        },
                        new
                        {
                            Id = 14,
                            Title = "التدقيق اللغوي"
                        },
                        new
                        {
                            Id = 15,
                            Title = "الكتابة الفنية"
                        },
                        new
                        {
                            Id = 16,
                            Title = "التسويق الرقمي"
                        },
                        new
                        {
                            Id = 17,
                            Title = "تحسين محركات البحث (SEO)"
                        },
                        new
                        {
                            Id = 18,
                            Title = "الإعلانات عبر وسائل التواصل الاجتماعي"
                        },
                        new
                        {
                            Id = 19,
                            Title = "التسويق بالبريد الإلكتروني"
                        },
                        new
                        {
                            Id = 20,
                            Title = "التسويق بالمحتوى"
                        },
                        new
                        {
                            Id = 21,
                            Title = "الدعم الفني"
                        },
                        new
                        {
                            Id = 22,
                            Title = "إدارة الشبكات"
                        },
                        new
                        {
                            Id = 23,
                            Title = "صيانة الأنظمة"
                        },
                        new
                        {
                            Id = 24,
                            Title = "دعم سطح المكتب"
                        },
                        new
                        {
                            Id = 25,
                            Title = "خدمات الحوسبة السحابية"
                        },
                        new
                        {
                            Id = 26,
                            Title = "تطوير البرامج التعليمية"
                        },
                        new
                        {
                            Id = 27,
                            Title = "تصميم المناهج الدراسية"
                        },
                        new
                        {
                            Id = 28,
                            Title = "تطوير التعليم الإلكتروني"
                        },
                        new
                        {
                            Id = 29,
                            Title = "تصميم الدروس التعليمية"
                        },
                        new
                        {
                            Id = 30,
                            Title = "تعليم عبر الإنترنت"
                        },
                        new
                        {
                            Id = 31,
                            Title = "تصميم الإعلانات"
                        },
                        new
                        {
                            Id = 32,
                            Title = "تصميم واجهات المستخدم (UI)"
                        },
                        new
                        {
                            Id = 33,
                            Title = "تجربة المستخدم (UX)"
                        },
                        new
                        {
                            Id = 34,
                            Title = "نمذجة ثلاثية الأبعاد (3D)"
                        },
                        new
                        {
                            Id = 35,
                            Title = "تصميم الشخصيات"
                        },
                        new
                        {
                            Id = 36,
                            Title = "تطوير التطبيقات بواسطة React.js"
                        },
                        new
                        {
                            Id = 37,
                            Title = "تطوير التطبيقات بواسطة Node.js"
                        },
                        new
                        {
                            Id = 38,
                            Title = "تطوير التطبيقات بواسطة Ruby on Rails"
                        },
                        new
                        {
                            Id = 39,
                            Title = "تطوير التطبيقات بواسطة SQL"
                        },
                        new
                        {
                            Id = 40,
                            Title = "تطوير التطبيقات بواسطة Django"
                        },
                        new
                        {
                            Id = 41,
                            Title = "كتابة المقالات القانونية"
                        },
                        new
                        {
                            Id = 42,
                            Title = "الكتابة الإبداعية"
                        },
                        new
                        {
                            Id = 43,
                            Title = "التحقق القانوني"
                        },
                        new
                        {
                            Id = 44,
                            Title = "التعريب"
                        },
                        new
                        {
                            Id = 45,
                            Title = "تحليل السوق"
                        },
                        new
                        {
                            Id = 46,
                            Title = "التحليلات الإحصائية"
                        },
                        new
                        {
                            Id = 47,
                            Title = "التسويق بالأداء"
                        },
                        new
                        {
                            Id = 48,
                            Title = "التسويق بالشراكة"
                        },
                        new
                        {
                            Id = 49,
                            Title = "التسويق الإلكتروني"
                        },
                        new
                        {
                            Id = 50,
                            Title = "إدارة الحملات الإعلانية"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shoghlana.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shoghlana.Core.Models.ApplicationUser", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.Admin", "Admin")
                        .WithOne("User")
                        .HasForeignKey("Shoghlana.Core.Models.ApplicationUser", "AdminId");

                    b.HasOne("Shoghlana.Core.Models.Client", "Client")
                        .WithOne("User")
                        .HasForeignKey("Shoghlana.Core.Models.ApplicationUser", "ClientId");

                    b.HasOne("Shoghlana.Core.Models.Freelancer", "Freelancer")
                        .WithOne("User")
                        .HasForeignKey("Shoghlana.Core.Models.ApplicationUser", "FreeLancerId");

                    b.OwnsMany("Shoghlana.Core.Models.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreatedOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("ExpiresOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("RevokedOn")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApplicationUserId", "Id");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("Admin");

                    b.Navigation("Client");

                    b.Navigation("Freelancer");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.ClientNotification", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.Client", "Client")
                        .WithMany("Notifications")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.FreelancerNotification", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.Freelancer", "Freelancer")
                        .WithMany("Notifications")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.FreelancerSkills", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.Freelancer", "Freelancer")
                        .WithMany("Skills")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shoghlana.Core.Models.Skill", "Skill")
                        .WithMany("freelancers")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Job", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.Category", "Category")
                        .WithMany("Jobs")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Shoghlana.Core.Models.Client", "Client")
                        .WithMany("Jobs")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shoghlana.Core.Models.Freelancer", "Freelancer")
                        .WithMany("WorkingHistory")
                        .HasForeignKey("FreelancerId");

                    b.Navigation("Category");

                    b.Navigation("Client");

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.JobSkills", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.Job", "Job")
                        .WithMany("skills")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shoghlana.Core.Models.Skill", "Skill")
                        .WithMany("jobs")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Project", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.Freelancer", "Freelancer")
                        .WithMany("Portfolio")
                        .HasForeignKey("FreelancerId");

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.ProjectImages", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.Project", "Project")
                        .WithMany("Images")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.ProjectSkills", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.Project", "Project")
                        .WithMany("skills")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shoghlana.Core.Models.Skill", "Skill")
                        .WithMany("projects")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Proposal", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.Freelancer", "Freelancer")
                        .WithMany("Proposals")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shoghlana.Core.Models.Job", "Job")
                        .WithMany("Proposals")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.ProposalImages", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.Proposal", "Proposal")
                        .WithMany("Images")
                        .HasForeignKey("ProposalId");

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Rate", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.Job", "Job")
                        .WithOne("Rate")
                        .HasForeignKey("Shoghlana.Core.Models.Rate", "JobId");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Admin", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Category", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Client", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("Notifications");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Freelancer", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Portfolio");

                    b.Navigation("Proposals");

                    b.Navigation("Skills");

                    b.Navigation("User");

                    b.Navigation("WorkingHistory");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Job", b =>
                {
                    b.Navigation("Proposals");

                    b.Navigation("Rate");

                    b.Navigation("skills");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Project", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("skills");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Proposal", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Skill", b =>
                {
                    b.Navigation("freelancers");

                    b.Navigation("jobs");

                    b.Navigation("projects");
                });
#pragma warning restore 612, 618
        }
    }
}
